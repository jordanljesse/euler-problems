# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

class Euler

	def initialize problem_number
		@numA = 1
		@numB = 0
		@fibonacci_number = 0
		@sum = 0
		puts "Let's solve Euler problem #" + problem_number.to_s + "!"
		self.fibonacci_sequence
	end

	def fibonacci_sequence
		while @fibonacci_number < 4000000
			@fibonacci_number = @numA + @numB
			puts "fibonacci_number\'s current value is " + @fibonacci_number.to_s
			@numB = @numA
			@numA = @fibonacci_number
			@sum = @sum + @fibonacci_number
		end
		puts "The sum of the Fibonacci sequence thus far is " + @sum.to_s
	end

end

euler_problem_2 = Euler.new(2)